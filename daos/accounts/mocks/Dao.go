// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	accounts "github.com/ashwin-m/transactions/models/accounts"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// Dao is an autogenerated mock type for the Dao type
type Dao struct {
	mock.Mock
}

type Dao_Expecter struct {
	mock *mock.Mock
}

func (_m *Dao) EXPECT() *Dao_Expecter {
	return &Dao_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: id, balanace
func (_m *Dao) Create(id int64, balanace float64) (accounts.Accounts, error) {
	ret := _m.Called(id, balanace)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 accounts.Accounts
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, float64) (accounts.Accounts, error)); ok {
		return rf(id, balanace)
	}
	if rf, ok := ret.Get(0).(func(int64, float64) accounts.Accounts); ok {
		r0 = rf(id, balanace)
	} else {
		r0 = ret.Get(0).(accounts.Accounts)
	}

	if rf, ok := ret.Get(1).(func(int64, float64) error); ok {
		r1 = rf(id, balanace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dao_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Dao_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - id int64
//   - balanace float64
func (_e *Dao_Expecter) Create(id interface{}, balanace interface{}) *Dao_Create_Call {
	return &Dao_Create_Call{Call: _e.mock.On("Create", id, balanace)}
}

func (_c *Dao_Create_Call) Run(run func(id int64, balanace float64)) *Dao_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(float64))
	})
	return _c
}

func (_c *Dao_Create_Call) Return(_a0 accounts.Accounts, _a1 error) *Dao_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Dao_Create_Call) RunAndReturn(run func(int64, float64) (accounts.Accounts, error)) *Dao_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *Dao) GetById(id int64) (accounts.Accounts, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 accounts.Accounts
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (accounts.Accounts, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) accounts.Accounts); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(accounts.Accounts)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dao_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type Dao_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id int64
func (_e *Dao_Expecter) GetById(id interface{}) *Dao_GetById_Call {
	return &Dao_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *Dao_GetById_Call) Run(run func(id int64)) *Dao_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Dao_GetById_Call) Return(_a0 accounts.Accounts, _a1 error) *Dao_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Dao_GetById_Call) RunAndReturn(run func(int64) (accounts.Accounts, error)) *Dao_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBalance provides a mock function with given fields: tx, id, newBalance
func (_m *Dao) UpdateBalance(tx pgx.Tx, id int64, newBalance float64) (accounts.Accounts, error) {
	ret := _m.Called(tx, id, newBalance)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 accounts.Accounts
	var r1 error
	if rf, ok := ret.Get(0).(func(pgx.Tx, int64, float64) (accounts.Accounts, error)); ok {
		return rf(tx, id, newBalance)
	}
	if rf, ok := ret.Get(0).(func(pgx.Tx, int64, float64) accounts.Accounts); ok {
		r0 = rf(tx, id, newBalance)
	} else {
		r0 = ret.Get(0).(accounts.Accounts)
	}

	if rf, ok := ret.Get(1).(func(pgx.Tx, int64, float64) error); ok {
		r1 = rf(tx, id, newBalance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dao_UpdateBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBalance'
type Dao_UpdateBalance_Call struct {
	*mock.Call
}

// UpdateBalance is a helper method to define mock.On call
//   - tx pgx.Tx
//   - id int64
//   - newBalance float64
func (_e *Dao_Expecter) UpdateBalance(tx interface{}, id interface{}, newBalance interface{}) *Dao_UpdateBalance_Call {
	return &Dao_UpdateBalance_Call{Call: _e.mock.On("UpdateBalance", tx, id, newBalance)}
}

func (_c *Dao_UpdateBalance_Call) Run(run func(tx pgx.Tx, id int64, newBalance float64)) *Dao_UpdateBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgx.Tx), args[1].(int64), args[2].(float64))
	})
	return _c
}

func (_c *Dao_UpdateBalance_Call) Return(_a0 accounts.Accounts, _a1 error) *Dao_UpdateBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Dao_UpdateBalance_Call) RunAndReturn(run func(pgx.Tx, int64, float64) (accounts.Accounts, error)) *Dao_UpdateBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewDao creates a new instance of Dao. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDao(t interface {
	mock.TestingT
	Cleanup(func())
}) *Dao {
	mock := &Dao{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
